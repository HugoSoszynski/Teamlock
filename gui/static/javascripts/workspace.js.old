String.prototype.format = function() {
	var args = arguments;
	return this.replace(/{(\d+)}/g, function(match, number) { 
	  return typeof args[number] != 'undefined'
	    ? args[number]
	    : match
	  ;
	});
};

Dropzone.autoDiscover = false;

function notify(type, title, message){
  PNotify.removeAll();
  
  new PNotify({
    title   : title,
    text    : message,
    type    : type,
    nonblock: {
      nonblock: true
    }
  })
}

function get_passphrase(first){
	var passphrase = localStorage.getItem('passphrase');
	if (passphrase === null){
	  $('#passphrase-modal').modal('show');
	  $('#error-passphrase').hide();
	  return false;
	}

	return passphrase;
}

function copy(text){
	$('#toCopy').val(text);
	$('#toCopy').show();
	toCopy.select();
	document.execCommand('copy');
	$('#toCopy').hide();
	return false;
}

function formatIcon (state) {
  if (!state.id) { return state.text; }
  var $state = $(
    '<span><i class="' + state.element.value.toLowerCase() + '">&nbsp;&nbsp;</i>' + state.text + '</span>'
  );
  return $state;
};


$.getJSON('/workspace', function(response){
	var all_workspaces = response.all_workspaces;

	$('#workspaces-select').select2({
		data: all_workspaces,
	})

	$('#workspaces-select').trigger('change');
})


var socket;
var folders;
var keys;
var files;
var dropzone;
var workspace_vue;
function init_websocket(websocket_path){

	var loc = window.location, new_uri;
	new_uri = "//" + loc.host;
	new_uri += loc.pathname + websocket_path;

	socket = io.connect(new_uri);
	socket.on("data", function(data){
		var keys_table  = $('#keys').dataTable();
		var files_table = $('#files').dataTable();

		folders = data.folders;
		keys    = data.keys;		
		files   = data.files;		

		$('#tree').jstree({
			core: {
				data          : folders,
				multiple      : false,
				check_callback: true
			},
			contextmenu: {
				items: function(item){
					return {
						rename: {
							label : "Rename",
							icon  : "fa fa-edit",
							action: function(elem){
								workspace_vue.folder_edit = true;
								workspace_vue.folder = {
									id    : item.id,
									text  : item.text,
									icon  : item.icon,
									parent: item.parents[0]
								}

								$('#id_icon_folder').select2({
									templateResult   : formatIcon,
									templateSelection: formatIcon
								})

								$('#id_icon_folder').val(item.icon).trigger('change');

								$('#modal-add-folder').modal('show');
							}
						},
						add: {
							label : "Add folder",
							icon  : "fa fa-plus",
							action: function(elem){
								workspace_vue.folder_edit = false;
								workspace_vue.folder = {
									id    : "",
									text  : "",
									icon  : "",
									parent: item.id
								}

								$('#id_icon_folder').select2({
									templateResult   : formatIcon,
									templateSelection: formatIcon
								})

								$('#modal-add-folder').modal('show');
							}
						},
						delete: {
							label : "Delete",
							icon  : "fa fa-trash",
							action: function(elem){
								var tmp = {
									id    : item.id,
									text  : item.text,
									icon  : item.icon,
									parent: item.parents[0]
								}

								var data = {
									folder: tmp,
									user  : $('#id_user').val()
								}

								socket.emit('delFolder', data);
							}
						}
					}
				}
			},
		    plugins: ["contextmenu", "dnd", "types", "search"]
		});

		$('#tree').on('loaded.jstree', function(){
			var jsonNodes = $('#tree').jstree(true).get_json();
			$('#tree').jstree(true).select_node(jsonNodes[0]);
		})

		if (dropzone !== undefined)
			Dropzone.forElement('.dropzone').destroy();

		dropzone = $('.dropzone').dropzone({
			url              : "#",
			uploadMultiple   : true,
			maxFilesize      : 5000,
			parallelUploads  : 100,
			maxFiles         : 100,
			addRemoveLinks   : true,
			previewsContainer: "#dropzonePreview",
			accept: function(file, done) {
				// console.log(file)
			},

			addedfile: function(file){
				var fr   = new FileReader();
				var node = $('#tree').jstree('get_selected');
				fr.addEventListener('loadend', function(){
					console.log('file loaded')
					var stream = ss.createStream({hightWaterMark: 16 * 2048});

					ss(socket).emit('uploadFile', stream, {
						size  : file.size,
						name  : file.name,
						folder: node[0]
					});

					var blobStream = ss.createBlobReadStream(file)

					var size = 0;
					blobStream.on('data', function(chunk){
						size += chunk.length;
						console.log(Math.floor(size / file.size * 100) + "%");
					})

					blobStream.pipe(stream)
				})

				fr.readAsArrayBuffer(file);
			},

			init: function(){
			  myDropzone = this;

			  this.on('success', function(file, response){
			  	if (!response.status){
			  		notify("error", 'Error', response.error);
			  	} else {
			  	}

			    setTimeout(function(){
			      myDropzone.removeAllFiles();
			    }, 2000);
			  })
			},

			sending: function(file, xhr, formData){
				var node = $('#tree').jstree('get_selected');
				formData.append('parent', node[0]);
			}
		})

		$(document).on('dnd_stop.vakata', function (e, elem) {
			var ref      = $('#tree').jstree(true);
			var id       = ref.get_node(elem.data.nodes[0]).id;
			var parentId = ref.get_node(elem.data.nodes[0]).parent; // '#' = no parent!

			socket.emit('moveFolder', {
				user     : $('#id_user').val(),
				parent_id: parentId,
				folder_id: id,
			})
		}); 

		$('#tree').on('changed.jstree', function(e, data){
			var node = data.node;
			if (!node)
				return;

			$('#btn-add-key').show();
			keys_table.fnClearTable();
			for (var key of keys){
				if (key.folder === node.id)
					keys_table.fnAddData(key);
			}

			files_table.fnClearTable();
			for (var file of files){
				if (file.folder === node.id)
					files_table.fnAddData(file);
			}
		})

		$("#tree").on('open_node.jstree', function (event, data) {
			if (data.instance.get_icon(data.node) === "fa fa-folder-o")	
			    data.instance.set_icon(data.node,'fa fa-folder-open-o');
		});
		$("#tree").on('close_node.jstree', function (event, data) {
			if (data.instance.get_icon(data.node) === "fa fa-folder-open-o")	
			    data.instance.set_icon(data.node,'fa fa-folder-o');
		});

		$('#form-save-key').unbind('submit');
		$('#form-save-key').on('submit', function(e){
			e.preventDefault();

			var tmp = {
				id          : workspace_vue.key.id,
				name        : workspace_vue.key.name,
				login       : workspace_vue.key.login,
				password    : workspace_vue.key.password,
				uri         : workspace_vue.key.uri,
				ipv4        : workspace_vue.key.ipv4,
				ipv6        : workspace_vue.key.ipv6,
				os          : $('#os').val(),
				informations: workspace_vue.key.informations,
				folder      : workspace_vue.key.folder,
			}

			if (tmp.id !== ""){
				// Remove key from datatable and array
				for (var i in keys){
					if (keys[i].id === tmp.id){
						keys.splice(i, 1);
						break;
					}
				}

				var keys_table = $('#keys').dataTable();
				var nodes = keys_table.fnGetNodes();
				for (var i in nodes){
					var d = keys_table.fnGetData(nodes[i]);
					if (d.id === tmp.id){
						var pos = keys_table.fnGetPosition(nodes[i]);
						keys_table.fnDeleteRow(pos);
						break;
					}
				}
			}

			var data = {
				key : tmp,
				user: $('#id_user').val()
			}

			socket.emit('saveKey', data);
			$('#modal-add-key').modal('hide');
		})

		$('#form-save-folder').unbind('submit');
		$('#form-save-folder').on('submit', function(e){
			e.preventDefault();

			var tmp = {
				id    : workspace_vue.folder.id,
				text  : workspace_vue.folder.text,
				icon  : $('#id_icon_folder').val(),
				parent: workspace_vue.folder.parent,
			}

			for (var i in folders){
				if (folders[i].id === tmp.id){
					folders.splice(i, 1);
					break;
				}
			}

			var data = {
				folder: tmp,
				user  : $('#id_user').val()
			}

			socket.emit('saveFolder', data);
			$('#modal-add-folder').modal('hide');
		})
	});

	socket.on('history', function(history){
		workspace_vue.histories.unshift(history);
	})

	socket.on('update', function(data){
		folders = data.folders;
		keys    = data.keys;

		$('#tree').jstree(true).settings.core.data = folders;
		$('#tree').jstree(true).refresh();
	})

	socket.on('updateFolder', function(new_folder){
		var exist = false;

		for (var i in folders){
			if (folders[i].id === new_folder.id){
				exist = true;
				folders[i].text   = new_folder.text;
				folders[i].icon   = new_folder.icon;
				folders[i].parent = new_folder.parent;
			}
		}

		if (!exist)
			folders.push(new_folder);

		$('#tree').jstree(true).settings.core.data = folders;
		$('#tree').jstree(true).refresh();
	})

	socket.on('updateKey', function(new_key){
		keys.push(new_key);

		var node       = $('#tree').jstree('get_selected')[0];
		var keys_table = $('#keys').dataTable();
		var nodes      = keys_table.fnGetNodes();

		if (node === new_key.folder){
			for (var i in nodes){
				var d = keys_table.fnGetData(nodes[i]);
				if (d.id === new_key.id){
					var pos = keys_table.fnGetPosition(nodes[i]);
					keys_table.fnDeleteRow(pos);
					break;
				}
			}
			
			keys_table.fnAddData(new_key);
		}
	})

	socket.on('delKey', function(key){
		for (var i in keys){
			if (keys[i].id === key.id){
				keys.splice(i, 1);
				break;
			}
		}

		var node       = $('#tree').jstree('get_selected')[0];
		var keys_table = $('#keys').dataTable();
		var nodes      = keys_table.fnGetNodes();
		if (node === key.folder){
			for (var i in nodes){
				var d = keys_table.fnGetData(nodes[i]);
				if (d.id === key.id){
					var pos = keys_table.fnGetPosition(nodes[i]);
					keys_table.fnDeleteRow(pos);
					break;
				}
			}
		}
	})

	socket.on('updateFile', function(new_file){
		files.push(new_file);

		var node        = $('#tree').jstree('get_selected')[0];
		var files_table = $('#files').dataTable();
		var nodes       = files_table.fnGetNodes();

		if (node === new_file.folder){
			for (var i in nodes){
				var d = files_table.fnGetData(nodes[i]);
				if (d.id === new_file.id){
					var pos = files_table.fnGetPosition(nodes[i]);
					files_table.fnDeleteRow(pos);
					break;
				}
			}

			files_table.fnAddData(new_file);
		}
	})

	socket.on('delFile', function(file){
		for (var i in files){
			if (files[i].id === file.id){
				files.splice(i, 1);
				break;
			}
		}

		var node        = $('#tree').jstree('get_selected')[0];
		var files_table = $('#files').dataTable();
		var nodes       = files_table.fnGetNodes();
		if (node === file.folder){
			for (var i in nodes){
				var d = files_table.fnGetData(nodes[i]);
				if (d.id === file.id){
					var pos = files_table.fnGetPosition(nodes[i]);
					files_table.fnDeleteRow(pos);
					break;
				}
			}
		}
	})
}

$('#btn-add-key').on('click', function(){
	var node = $('#tree').jstree('get_selected');

	workspace_vue.key = {
		id          : "",
		name        : "",
		login       : "",
		password    : "",
		uri         : "",
		ipv4        : "",
		ipv6        : "",
		os          : "",
		informations: "",
		folder      : node[0],
	}
	$('#modal-add-key').modal('show');	
})

function close_websocket(){
	if (socket)
		socket.close();
}

$('.gen_pass').on('click', function(e){
	e.stopPropagation();
})

Vue.config.delimiters = ['${', '}'];
workspace_vue = new Vue({
	el: ".tl-content-body",
	data: {
		workspaces: [],
		folders   : [],
		histories : [],

		search_tree     : "",
		search_workspace: "",
		workspace_name  : "",
		folder_edit     : false,

		length_pass         : 8,
		number_pass         : true,
		uppercase_pass      : true,
		exclude_similar_pass: true,
		symbols_pass        : true,

		key: {
			id          : "",
			name        : "",
			login       : "",
			password    : "",
			uri         : "",
			ipv4        : "",
			ipv6        : "",
			os          : "",
			informations: "",
			folder      : null,
		},

		folder: {
			id    : "",
			text  : "",
			icon  : "",
			parent: "",
		}
	},

	mounted: function(){
		this.get_tree($('#workspaces-select').val());
	},

	watch: {
		search_tree: function(s){
			$('#tree').jstree(true).search(s);
		},

		search_workspace: function(s){
			$('#keys').dataTable().fnFilter(s);
			$('#files').dataTable().fnFilter(s);
		}
	},

	methods: {
		date_format: function(data){
			var m = new moment(data);
			return m.format('DD/MM/YYYY HH:mm:ss');
		},

		showpass: function(){
			$('#id_password').showPassword();

			setTimeout(function(){
				$('#id_password').hidePassword();
			}, 2000);
		},

		generatepass: function(e){
			var self = this;

			$.post('/generatepass', 
			{
				length         : self.length_pass,
				number         : self.number_pass,
				symbols        : self.symbols_pass,
				uppercase      : self.uppercase_pass,
				exclude_similar: self.exclude_similar_pass,
			}, 
			function(response){
				self.key.password = response.password;
			})
		},
		
		clear_history: function(){
			var self = this;

			$.post(
				'/histories/clear', 
				{workspace: $('#workspaces-select').val()}, 
				function(response){
					if (response.status){
						notify('success', 'Success', 'History cleared');
						self.histories = [];
					} else{
						notify('error', 'Error', response.error);
					}
				}
			)
		},

		add_folder_root: function(){
			workspace_vue.folder_edit = false;
			workspace_vue.folder = {
				id    : "",
				text  : "",
				icon  : "",
				parent: "#"
			}

			$('#id_icon_folder').select2({
				templateResult   : formatIcon,
				templateSelection: formatIcon
			})

			$('#modal-add-folder').modal('show');
		},

		delete_workspace: function(){

		},

		get_histories: function(workspace_id){
			var self = this;

			$.post('/histories', {workspace: workspace_id}, function(response){
				if (response.status)
					self.histories = response.histories;
				else
					notify('error', 'Error', 'An error occured.')
			})
		},

		get_tree: function(workspace_id){
			var self = this;

			var passphrase = get_passphrase();
			if (!passphrase)
				return;

			$.post(
				'/tree/', 
				{
					'workspace_id': workspace_id,
					'passphrase'  : passphrase
				},

				function(response){
					if (!response.status){
						localStorage.clear();

						setTimeout(function(){
							self.get_tree();
						}, 1000);
					} else {
						var websocket_path = response.websocket;
						init_websocket(websocket_path);
						self.get_histories(workspace_id);
					}
				}
			)
		},

		form_save_workspace: function(){
			var self = this;

			if (self.workspace_name === "")
				return;

			$.post(
				'/new',
				{name: self.workspace_name},

				function(response){
					if (response.status){
						notify('success', "Success", "Workspace successfully created");
						$('#workspaces-select').append(new Option(response.workspace.name, response.workspace._id))
						$('#modal-add-workspace').modal('hide');
						workspace_vue.workspace_name = "";
					} else {
						notify('error', 'Error', response.error);
						$('#modal-add-workspace').modal('hide');
					}
				}, 'json'
			)
		}
	}
})

var file_table = $('#files').DataTable({
	sDom: '<"top"<"clear">>rt<"bottom"l<"clear">>',
    oLanguage: {
        sLengthMenu: '_MENU_',
        oPaginate  :{
            sNext    : '',
            sPrevious: ''
        }
    },
	bPaginate: false,
	aaSorting: [[2, 'asc']],
	aoColumns: [
		{mData: "id", name: 'id', defaultContent: '', bVisible: false, aTargets: [0], sClass: 'center', bSortable: false},
		{mData: "filename", name: 'filename', defaultContent: '', bVisible: true, aTargets: [1], sClass: 'center', bSortable: true},
		{mData: "type", name: 'type', defaultContent: '', bVisible: true, aTargets: [2], sClass: 'center', bSortable: true},
		{mData: "size", name: 'size', defaultContent: '', bVisible: true, aTargets: [3], sClass: 'center', bSortable: true},
		{mData: "actions", name: 'actions', defaultContent: '', bVisible: true, aTargets: [4], sClass: 'center', bSortable: true, mRender: function(data, type, row){
			return "<button href='#' class='btn btn-xs btn-flat btn-info btn-download' data-id='" + row.data + "'><i class='fa fa-download'></i></button>&nbsp;&nbsp;<button href='#' data-id='" + row.id + "' class='btn btn-xs btn-flat bg-navy btn-delete'><i class='fa fa-trash'></i></button>"

		}}
	],

	fnCreatedRow: function(nRow, aData, iDataIndex){
		$(nRow).find('.btn-download').on('click', function(e){
			// Download file
			e.preventDefault();
			e.stopPropagation();

			var btn = this;

			var text = $(btn).html();
			$(btn).html("<i class='fa fa-spinner fa-spin'></i>");

			var file_id = $(btn).data('id');

			ss(socket).on('dlFile', function(stream, data){
				chunks = [];

				stream.on('data', function(chunk){
					chunks.push(chunk.toString());
				})

				stream.on('end', function(){
					console.log(chunks)
					// var data = new Blob(chunks);
					var file = new File(chunks, aData.filename, {type: "text/plain;charset=utf-8"});
					saveAs(file);

					$(btn).html(text);
				})
			})

			ss(socket).emit('downloadFile', {
				file_id: file_id,
			});
		});

		$(nRow).find('.btn-delete').on('click', function(e){
			e.preventDefault();
			e.stopPropagation();

			(new PNotify({
		        title  : 'Delete',
		        text   : 'Delete selected file ?',
		        icon   : 'fa fa-trash',
		        hide   : false,
		        confirm: {
		          confirm: true
		        },
		        buttons: {
		          closer: false,
		          sticker: false
		        },
		        history: {
		          history: false
		        }
		    })).get().on('pnotify.confirm', function() {
	      		for (var file of files){
	      			if (file.id === aData.id){
	      				var data = {
	      					file: file,
	      					user: $('#id_user').val()
	      				}

			      		socket.emit('delFile', data);
			      		break;
	      			}
	      		}
	    	})	    	

		})
	}
})

var key_table = $('#keys').DataTable({
	sDom: '<"top"<"clear">>rt<"bottom"l<"clear">>',
    oLanguage: {
        sLengthMenu: '_MENU_',
        oPaginate  :{
            sNext    : '',
            sPrevious: ''
        }
    },
	bPaginate  : false,
	aaSorting  : [[2, "asc"]],
	aoColumns  : [
      {mData: "id", name: "id", defaultContent: "", bVisible: false, aTargets: [0], sClass: "center", bSortable: false},
      {mData: "name", name: "name", defaultContent: "", bVisible: true, aTargets: [1], sClass: "center", bSortable: true},
      {mData: "login", name: "login", defaultContent: "", bVisible: true, aTargets: [2], sClass: "center", bSortable: true},
      {mData: "password", name: "password", defaultContent: "", bVisible: true, aTargets: [3], sClass: "center", bSortable: false, mRender: function(data, type, row){
      	return "<span class='passwd'>***********</span><button class='btn btn-success btn-xs btn-copy'><i class='fa fa-copy'></i></button>";

      }},
      {mData: "uri", name: "uri", defaultContent: "", bVisible: false, aTargets: [4], sClass: "center", bSortable: true},
      {mData: "ipv4", name: "ipv4", defaultContent: "", bVisible: true, aTargets: [5], sClass: "center", bSortable: true},
      {mData: "ipv6", name: "ipv6", defaultContent: "", bVisible: true, aTargets: [6], sClass: "center", bSortable: true},
      {mData: "os", name: "os", defaultContent: "", bVisible: true, aTargets: [7], sClass: "center", bSortable: true},
      {mData: "informations", name: "informations", defaultContent: "", bVisible: false, aTargets: [8], sClass: "center", bSortable: false, 'sWidth': "10%"},
      {mData: "action", name: "action", defaultContent: "", bVisible: true, aTargets: [9], sClass: "center", bSortable: false, 'sWidth': "10%", mRender: function(data, type, row){
  		return "<button href='#' class='btn btn-xs btn-flat btn-info btn-edit'><i class='fa fa-edit'></i></button>&nbsp;&nbsp;<button href='#' data-id='" + row.id + "' class='btn btn-xs btn-flat bg-navy btn-delete'><i class='fa fa-trash'></i></button>"
      }},
      {mData: "folder", name: "folder", defaultContent: "", bVisible: false, aTargets: [9], sClass: "center", bSortable: false, 'sWidth': "1%"},
    ],
    fnCreatedRow: function( nRow, aData, iDataIndex ) {
    	$(nRow).find('.passwd').click(function(e){
    		// Showing password for 3 seconds
    		e.preventDefault();
    		e.stopPropagation();

    		var span = this;
    		var text = $(span).text();
    		$(span).text(aData['password']);

    		setTimeout(function(){
    			$(span).text(text);
    		}, 3000);
    	});

    	$(nRow).find(".btn-copy").click(function(e){
    		// Copying password to buffer
    		e.preventDefault();
    		e.stopPropagation();

    		var passwd = aData['password'];
				copy(passwd);
    	})

    	$(nRow).find(".btn-edit").click(function(e){
    		e.preventDefault();
    		e.stopPropagation();

    		if (!get_passphrase())
				return;

				workspace_vue.key = {
					id          : aData.id,
					name        : aData.name,
					login       : aData.login,
					password    : aData.password,
					uri         : aData.uri,
					ipv4        : aData.ipv4,
					ipv6        : aData.ipv6,
					os          : aData.os,
					informations: aData.informations,
					folder      : aData.folder,
				}

				$('#os').val(aData.os).trigger('change');
				$('#modal-add-key').modal('show');
    	})

    	$(nRow).find('.btn-delete').click(function(e){
			var self = this;

			e.preventDefault();
			e.stopPropagation();

			(new PNotify({
		        title  : 'Delete',
		        text   : 'Delete selected key ?',
		        icon   : 'fa fa-trash',
		        hide   : false,
		        confirm: {
		          confirm: true
		        },
		        buttons: {
		          closer: false,
		          sticker: false
		        },
		        history: {
		          history: false
		        }
		    })).get().on('pnotify.confirm', function() {
	      		for (var key of keys){
	      			if (key.id === aData.id){
	      				var data = {
	      					key: key,
	      					user: $('#id_user').val()
	      				}

			      		socket.emit('delKey', data);
			      		break;
	      			}
	      		}
	    	})	    		
    	})

    	$(nRow).click(function(){
    		var table = $('#keys').dataTable();
    		var nodes = table.fnGetNodes();

    		if (table.fnIsOpen(nRow)){
    			table.fnClose(nRow);
    			return false;
    		}

    		for (var node of nodes)
    			table.fnClose(node);

    		if (aData['informations'] === "")
    			return;

		    var sOut = '<b>Information:</b> '+aData['informations'];
    		table.fnOpen(nRow, sOut, 'details' );
		    return sOut;
    	})
    }
})

$('#workspaces-select').on('change', function(){
	var table = $('#keys').dataTable();
	table.fnClearTable();

	close_websocket();
	workspace_vue.folders = [];
	$('#tree').jstree("destroy").empty();

	var workspace_id = $(this).val();
	if (workspace_id !== null)
		workspace_vue.get_tree(workspace_id);
})
$('#workspaces-select').trigger('change');

$("#workspaces-select").on("select2:open", function() {
    $(".select2-search__field").attr("placeholder", "Search...");
});

$('#form_passphrase').on('submit', function(){
	var text = $("#submit-passphrase").html();
	$("#submit-passphrase").html("<i class='fa fa-spinner fa-spin'></i>");
	$('#error-passphrase').hide();

	$.post(
		'/passphrase/',
		{'passphrase': $('#passphrase').val(),},

		function(response){
			$("#passphrase").val("");
			$("#submit-passphrase").html(text);

			if (response.status){
				$('#passphrase-modal').modal('hide');
				localStorage.setItem('passphrase', response.passphrase);
				workspace_vue.get_tree($('#workspaces-select').val());

			} else {
				$('#error-passphrase').html(response.error);
				$('#error-passphrase').show();
			}
		}
	)
});

$('#modal-share-workspace').on('shown.bs.modal', function() {
	var tables = $.fn.dataTable.fnTables(true);
	for (var i in tables){
		if (tables[i].id === 'table_share')
			return;
	}

	$('#table_share').DataTable({
		bProcessing: true,
		bPaginate: true,
		aaSorting: [[1, "desc"]],
		aoColumns: [
			{mData: "id", name: "id", defaultContent: "", bVisible: false, aTargets: [0], sClass: "center", bSortable: false},
      		{mData: "user", name: "user", defaultContent: "", bVisible: true, aTargets: [1], sClass: "center", bSortable: false, sWidth: "95%", mRender: function(data, type, row){
      			return data.alias + " - " + data.email;
      		}},
			{mData: "action", name: "action", defaultContent: "", bVisible: true, aTargets: [5], sClass: "center", bSortable: false, sWidth: "5%", mRender: function(data, type, row){
				return "<button href='#' class='btn btn-xs btn-flat bg-navy btn-delete'><i class='fa fa-trash'></i></button>"
			}}
		],
		sAjaxSource: "/getshare/",
		sDom: '<"top"l<"clear">>rt<"bottom"ip<"clear">>',
        oLanguage: {
            sLengthMenu: '_MENU_',
            oPaginate  :{
                sNext    : '',
                sPrevious: ''
            }
        },
		bServerSide  : true,
		sServerMethod: "POST",
		fnServerData : function(sSource, aoData, fnCallback){
	      aoData.push({
			name : 'workspace',
			value: $('#workspaces-select').val()
	      });

	      $.ajax({
			type   : "POST",
			url    : sSource, 
			data   : aoData, 
			success: function(data, callback){
	            if (typeof(data) === 'string'){
	              window.location.href = window.location.href;
	            } else {
	              fnCallback(data)
	            }
	        }
	      })
	    },

	    fnCreatedRow: function( nRow, aData, iDataIndex ) {
	    	$(nRow).find(".btn-delete").click(function(e){
	    		e.preventDefault();
	    		e.stopPropagation();

	    		$.post(
	    			'/delshare',
	    			{'share': aData._id},

	    			function(response){
	    				if (!response.status){
	    					notify("error", 'Error', response.error);
	    				} else {
	    					notify("success", 'Success', 'Share deleted');
	    					$('#table_share').dataTable().fnDraw();
	    				}
	    			}
	    		)
	    	});
	    }
	})
});

$('#add_users_share').on('click', function(){
	if (!get_passphrase())
		return;

	var users = $('#share_users').val();

	var table         = $('#table_share').dataTable();
	var nodes         = table.fnGetNodes();
	var current_share = [];

	for (var node of nodes){
		current_share.push(table.fnGetData(node).user._id);
	}

	var done = true;
	for (var i in users){
		if (current_share.indexOf(users[i]) > -1){
			done = false;
			notify("error", "Error", "An user already exist")
		}
	}

	if (done){
		var btn  = this;
		var text = $(btn).html();
		$(btn).html("<i class='fa fa-spinner fa-spin'></i>");
		
		$.post(
			'/share/',
			{
				user      : $('#id_user').val(),
				users     : JSON.stringify(users),
				passphrase: get_passphrase(),
				workspace : $('#workspaces-select').val(),
			},

			function(response){
				$(btn).html(text);
				if (!response.status){
					notify("error", 'Error', response.error)
				} else {
					$('#share_users').val("").trigger('change');
					notify("success", 'Success', 'Workspace shared !')
					$('#table_share').dataTable().fnDraw();
				}
			}
		)
	}
})

$('#open-history').on('click', function(){
	console.log('okokokok')
	if ($(this).data('open') === 'true'){
		$('.tl-history').css('right', '250px');
		$(this).find('i')[0].removeClass('fa-chevron-right');
		$(this).find('i')[0].addClass('fa-chevron-left');
		$(this).data('open', 'false');
	} else {
		$('.tl-history').css('right', '0');
		$(this).find('i')[0].removeClass('fa-chevron-left');
		$(this).find('i')[0].addClass('fa-chevron-right');
		$(this).data('open', 'true');
	}
})

var isResizing = false;
var container  = $('.tl-main'),
	tree       = $('.tl-tree'),
	content    = $('.tl-content'),
	handle     = $('#dragbar');

handle.on('mousedown', function (e) {
    isResizing = true;
    lastDownX = e.clientX;
});

$(document).on('mousemove', function (e) {
    // we don't want to do anything if we aren't resizing.
    if (!isResizing) 
        return;

	var tree_width    = $(tree).width();
	var content_width = $(content).width();

	var new_tree_width = (e.clientX);

	if (new_tree_width < 250)
		new_tree_width = 250;

	var new_content_width = content_width + (new_tree_width - tree_width)


    tree.css('width', new_tree_width);
    content.css('marginLeft', new_tree_width);
}).on('mouseup', function (e) {
    // stop resizing
    isResizing = false;
});